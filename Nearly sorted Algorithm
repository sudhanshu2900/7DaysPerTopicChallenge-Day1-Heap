Given an array of n elements, where each element is at most k away from its target position. The task is to print array in sorted form.

Input:
First line consists of T test cases. First line of every test case consists of two integers N and K, denoting number of elements in array and 
at most k positions away from its target position respectively. Second line of every test case consists of elements of array.

T = 2
  N=3, K=3
  arr[] = 2 1 3
  N=6, K=3
  arr[] = 2 6 3 12 56 8

Output:
1 2 3
2 3 6 8 12 56


SOLUTION:


#include<bits/stdc++.h>
using namespace std;
int main()
 {
	int t,n,k;
	cin>>t;
	int arr[n];
	  
	while(t--){
	    cin>>n>>k;
	    for(int i=0;i<n;i++){
	        cin>>arr[i];
	    }
	    priority_queue<int, vector<int>, greater<int>> minHeap (arr,arr+n);
	    for(int i=0;i<n;i++){
	        arr[i]=minHeap.top();
	        minHeap.pop();
	    }
	    for(int i=0;i<n;i++){
	        cout<<arr[i]<<" ";
	    }
	    cout<<"\n";
	}
	return 0;
}





